package b_application_business_rules.use_cases.project_selection_use_cases;

import b_application_business_rules.entity_models.ProjectModel;
import b_application_business_rules.use_cases.interfaces.ProjectRepository;
import b_application_business_rules.use_cases.project_selection_gateways.IDBRemove;
import d_frameworks_and_drivers.database_management.DBControllers.DBManagerRemoveController;

import java.util.UUID;

import a_enterprise_business_rules.entities.Project;

public class DeleteProject implements DeleteProjectUseCase {
    private ProjectRepository projectRepository;
    /**
     * Empty constructor (would be autogenerated by Java if not included anyways)
     */
    public DeleteProject() {
        this.projectRepository = projectRepository;
    }

    /**
     * Deletes a project from the database, given its ID.
     * 
     * @param ID The ID of the project to delete.
     */
    public void deleteProject(UUID ID) {
        // IDBSearch databaseSearcher = new DBManagerSearchController();
        IDBRemove databaseRemover = new DBManagerRemoveController();

        // List<String> projectUUIDs = databaseSearcher.DBColumnSearch(ID.toString());
        ProjectModel tempProjectModel = new ProjectModel("tempname", ID, "", null);
        databaseRemover.DBRemove(tempProjectModel, ID);

        // TOOD -- So, like, the DBRemove needs a ProjectModel, in addition to the UUID,
        // but like, it never actually uses it :|
        // so, I'm just creating a temporary project model (rather than a null
        // reference)
        // so no "errors" are seen... idkdkdkkdkd
    }

    /**
     * Deletes a project from the database, given a Project entity.
     * 
     * @param project The project to delete from the database.
     */
    public void deleteProject(Project project) {
        this.deleteProject(project.getID());
    }

    /**
     * Deletes a project from the database, given a ProjectModel.
     * 
     * @param project The project to delete from the database.
     */
    public void deleteProject(ProjectModel project) {
        this.deleteProject(project.getID());
    }

}
