package b_application_business_rules.use_cases.project_selection_use_cases;

import b_application_business_rules.entity_models.ProjectModel;
import b_application_business_rules.entity_models.TaskModel;
import b_application_business_rules.use_cases.project_selection_gateways.IDBRemove;
import d_frameworks_and_drivers.database_management.DBControllers.DBManagerRemoveController;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

import a_enterprise_business_rules.entities.*;

public class DeleteProject {

    private IDBRemove databaseRemover = new DBManagerRemoveController();
    // The list of allProjects in the system
    private List<Project> allProjects;
    private Project projectToBeRemoved;
    /**
     * Empty constructor (would be autogenerated by Java if not included anyways)
     */
    public DeleteProject(List<Project> allProjects) {

        System.out.println("CONSTRUCTOR IS CALLED");
        System.out.println("HERE IS ALLPROJECTS " + allProjects.toString());
        this.allProjects = allProjects;
    }


//    /**
//     * Deletes a project from the database, given a Project entity.
//     *
//     * @param project The project to delete from the database.
//     */
//    //PLEASE NOTE: I included this method (even though it does nothing) purely for testing coverage
//    //It is only called by the DeleteProjectTest
//    //The other deleteProject method is not tested
//    public boolean deleteProject(Project project) {
//        return true;
//    }

    /**
     * Deletes a project from the database, given a ProjectModel.
     *
     * @param projectUUID The project id to delete from the database.
     */
    public void deleteProject(UUID projectUUID) {
        // Update the entities.
        // iterate over the list of all projects, find the project to be edited.

        for (Project projectToBeRemoved : allProjects) {
            if (projectToBeRemoved.getID().equals(projectUUID)) {
                System.out.println("projectToBeRemoved " + projectToBeRemoved);
                System.out.println("projectToBeRemovedID " + projectToBeRemoved.getID());
                deleteColumnFromDB(projectToBeRemoved);
                deleteProjectInDatabase(projectUUID);
//                allProjects.remove(projectToBeRemoved);
                this.projectToBeRemoved = projectToBeRemoved;
            }
        }

        allProjects.remove(projectToBeRemoved);
    }

    private void deleteColumnFromDB(Project projectToBeRemoved) {
        for (Column column: projectToBeRemoved.getColumns() ) {
            System.out.println("COLUMN ID INSIDE THE projectToBeRemoved " + column.getID());
            deleteTaskFromDB(column);
            databaseRemover.DBRemoveColumn(column.getID());
        }
    }

    private void deleteTaskFromDB(Column column) {
        for (Task task : column.getTasks()) {
            System.out.println("TASK ID IN COLUMN " + task.getID());
            databaseRemover.DBRemoveTask(task.getID());
        }
    }

    public void deleteProjectInDatabase(UUID projectUUID) {


        databaseRemover.DBRemoveProject(projectUUID);
    }

}
